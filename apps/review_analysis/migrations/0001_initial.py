# Generated by Django 5.2.4 on 2025-08-01 03:42

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("review", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PipelineStepType",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Updated at"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, null=True, verbose_name="Created at"
                    ),
                ),
                (
                    "key",
                    models.CharField(
                        choices=[
                            ("tone_detection", "Tone Detection"),
                            ("issue_detection", "Issue Detection"),
                            ("complexity_check", "Complexity Check"),
                            ("gpt_analysis", "GPT Analysis"),
                            ("persistence", "Persistence"),
                        ],
                        help_text="Unique identifier for the pipeline step type",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Human-readable label for the step", max_length=100
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of what this step does",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pipeline Step Type",
                "verbose_name_plural": "Pipeline Step Types",
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="AnalysisResult",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Updated at"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, null=True, verbose_name="Created at"
                    ),
                ),
                (
                    "tone",
                    models.CharField(
                        choices=[
                            ("very_negative", "Very Negative"),
                            ("negative", "Negative"),
                            ("neutral", "Neutral"),
                            ("positive", "Positive"),
                            ("very_positive", "Very Positive"),
                        ],
                        help_text="Overall tone of the review",
                        max_length=20,
                    ),
                ),
                (
                    "raw_polarity",
                    models.FloatField(help_text="Raw polarity score (-1 to 1)"),
                ),
                (
                    "raw_subjectivity",
                    models.FloatField(help_text="Raw subjectivity score (0 to 1)"),
                ),
                (
                    "issues",
                    models.JSONField(
                        default=list, help_text="List of detected issues/requests"
                    ),
                ),
                (
                    "complex_review",
                    models.CharField(
                        blank=True,
                        help_text="Reason why this review needs manual attention",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes from analysis",
                        null=True,
                    ),
                ),
                (
                    "confidence",
                    models.FloatField(
                        default=1.0, help_text="Confidence score of the analysis (0-1)"
                    ),
                ),
                (
                    "analysis_source",
                    models.CharField(
                        choices=[
                            ("local", "Local Analysis"),
                            ("gpt", "GPT Analysis"),
                            ("manual", "Manual Override"),
                        ],
                        default="local",
                        help_text="Source of the analysis",
                        max_length=20,
                    ),
                ),
                (
                    "analysis_timestamp",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the analysis was performed"
                    ),
                ),
                (
                    "full_payload",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Full analysis payload for debugging",
                    ),
                ),
                (
                    "flag_support",
                    models.CharField(
                        blank=True,
                        help_text="Support flag (e.g., hidden issue in positive review)",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "review",
                    models.OneToOneField(
                        help_text="The review that was analyzed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analysis_result",
                        to="review.review",
                    ),
                ),
            ],
            options={
                "verbose_name": "Analysis Result",
                "verbose_name_plural": "Analysis Results",
                "ordering": ["-analysis_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="PipelineStepConfig",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Updated at"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, null=True, verbose_name="Created at"
                    ),
                ),
                (
                    "enabled",
                    models.BooleanField(
                        default=True, help_text="Whether this step is enabled"
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order in which steps are executed (lower numbers first)",
                    ),
                ),
                (
                    "params",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Parameters for the step (e.g., thresholds, model settings, prompt_id)",
                    ),
                ),
                (
                    "step_type",
                    models.ForeignKey(
                        help_text="Type of pipeline step",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="configs",
                        to="review_analysis.pipelinesteptype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pipeline Step Configuration",
                "verbose_name_plural": "Pipeline Step Configurations",
                "ordering": ["order", "step_type__label"],
            },
        ),
        migrations.CreateModel(
            name="PromptTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Updated at"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, null=True, verbose_name="Created at"
                    ),
                ),
                (
                    "prompt_id",
                    models.CharField(
                        help_text="Unique identifier for the prompt template",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0",
                        help_text="Version of the prompt template",
                        max_length=20,
                    ),
                ),
                ("text", models.TextField(help_text="The actual prompt template text")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this prompt is currently active",
                    ),
                ),
            ],
            options={
                "verbose_name": "Prompt Template",
                "verbose_name_plural": "Prompt Templates",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["prompt_id", "is_active"],
                        name="review_anal_prompt__46cada_idx",
                    )
                ],
                "unique_together": {("prompt_id", "version")},
            },
        ),
        migrations.CreateModel(
            name="ReviewTicket",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="Updated at"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, null=True, verbose_name="Created at"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("in_progress", "In Progress"),
                            ("closed", "Closed"),
                        ],
                        default="open",
                        help_text="Current status of the ticket",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=0, help_text="Priority level (higher = more urgent)"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Internal notes about the ticket"
                    ),
                ),
                (
                    "analysis_result",
                    models.ForeignKey(
                        help_text="The analysis result that triggered this ticket",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tickets",
                        to="review_analysis.analysisresult",
                    ),
                ),
                (
                    "assignee",
                    models.ForeignKey(
                        blank=True,
                        help_text="User assigned to handle this ticket",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "review",
                    models.ForeignKey(
                        help_text="The review associated with this ticket",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tickets",
                        to="review.review",
                    ),
                ),
            ],
            options={
                "verbose_name": "Review Ticket",
                "verbose_name_plural": "Review Tickets",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="analysisresult",
            index=models.Index(
                fields=["tone", "analysis_timestamp"],
                name="review_anal_tone_cbb4fa_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="analysisresult",
            index=models.Index(
                fields=["analysis_source"], name="review_anal_analysi_908983_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="analysisresult",
            index=models.Index(
                fields=["complex_review"], name="review_anal_complex_352fda_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="pipelinestepconfig",
            index=models.Index(
                fields=["enabled", "order"], name="review_anal_enabled_caf961_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reviewticket",
            index=models.Index(
                fields=["status", "created_at"], name="review_anal_status_917ead_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reviewticket",
            index=models.Index(
                fields=["assignee", "status"], name="review_anal_assigne_0fa150_idx"
            ),
        ),
    ]
